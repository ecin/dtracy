Dtracy, or How To Soon Spot Trends in your Web Application and Server
=====================================================================

status
------

Dtracy is part of the Ruby on Rail's Google Summer of Code '09 Quartet, with development updates and entertainment available at `http://ecin.tumblr.com` Welcome! Sit down, have a cookie, and enjoy the smell of freshly baked code right out of the oven.

requirements
------------

An operating system with support for Dtrace [ADD URL] is a must. Mac OS X, Solaris/OpenSolaris and FreeBSD are all acceptable choices, though you're hardcore if you get Dtrace running properly on FreeBSD.

A courageous heart will also come in handy: this is still alpha software.

gem dependencies
------------

* rack
* rack-contrib ( for Rack::JSONP )
* sinatra
* ruby-dtrace
* haml
* thin ( or another threaded web server )

running locally
---------------

Running locally requires a threaded web server, since some requests aren't meant to return immediately. Thin in threaded mode has worked well, as should Ebb if anyone can get that configured. The running process will also require root privileges in order to access the Dtrace probes. In any case, the rackup file is located at `examples/dtracy.ru`.

`sudo bin/server`

... will run thin in threaded mode using the mentioned rackup file.

hello world - a brief overview
------------------------------

Actually, I don't mean to be pretentious. "hello 4 or 5 curious developers" is a better name for this section.

Digression aside, Dtracy is divided into two areas: `Rack::Probe` and `Sinatra::Dtracy`. They're both written as Rack middleware to allow easy dropping into other apps, with `Rack::Probe` handling the definition and consumption of Dtrace probes while `Sinatra::Dtracy` is meant to provide visualizations to the data generated from the aforementioned probes. 

When running `bin/server`, the `Sinatra::Dtracy` app gets loaded, providing a pulsating circle and an irrelevant line graph at `/`. Requests made to `/push` will fire a hard-coded probe, which in turn will change some properties of the circle. In short:

* Point a browser at `localhost:3000/`
* `curl localhost:3000/push` several times
* Watch the circle on the browser 'work harder'
* `ab -n100 http://localhost:3000/push` if you feel like hosing the application

Feel free to visit `/updates` to see what kind of JSON data gets generated by the probe.



